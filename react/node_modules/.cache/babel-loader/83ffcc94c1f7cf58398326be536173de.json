{"ast":null,"code":"import _toConsumableArray from\"/Users/allentrandinh/Desktop/BlacknRossi2/full-stack/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/allentrandinh/Desktop/BlacknRossi2/full-stack/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import axios from'axios';import BaseInput from'./base_input';import ConflictInput from'./conflict_areas_input';import Explanation from'./explanation';import ResultDisplay from'./result_display';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FullInput=function FullInput(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),bases=_useState2[0],setBases=_useState2[1];var updatebaselist=function updatebaselist(newBase){setBases([].concat(_toConsumableArray(bases),[newBase]));};var removeBaseItem=function removeBaseItem(id){var newBases=bases.filter(function(base){return base.id!==id;});setBases(newBases);};var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),areas=_useState4[0],setAreas=_useState4[1];var updatearealist=function updatearealist(newArea){setAreas([].concat(_toConsumableArray(areas),[newArea]));};var removeAreaItem=function removeAreaItem(id){var newAreas=areas.filter(function(area){return area.id!==id;});setAreas(newAreas);};// const data = {intro: \"The ascending order of bases with regards to total distance to all potential conflicting areas are:\", base: [[\"sprat\", 34, 12]]}\n// const before = {intro:\"No data to display\",base:[]}\nvar _useState5=useState({intro:\"No data to display\",base:[]}),_useState6=_slicedToArray(_useState5,2),reply=_useState6[0],setReply=_useState6[1];var resetAll=function resetAll(){setAreas([]);setBases([]);setReply({intro:\"No data to display\",base:[]});};var submitData=function submitData(e){e.preventDefault();console.log(\"submit button clicked\");axios.post('/baseranker',{base:bases,area:areas}).then(function(respond){console.log(respond);setReply({intro:respond.data.intro,base:respond.data.base});}).catch(function(err){console.log(err);});};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Explanation,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid37\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(BaseInput,{bases:bases,onChange:updatebaselist}),/*#__PURE__*/_jsx(ConflictInput,{areas:areas,onChange:updatearealist})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"outputBase\",children:bases.map(function(base){var id=base.id,basename=base.basename,longitude=base.longitude,latitude=base.latitude;return/*#__PURE__*/_jsxs(\"div\",{className:\"item\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Base\"}),/*#__PURE__*/_jsx(\"h4\",{children:basename}),/*#__PURE__*/_jsx(\"p\",{children:longitude}),/*#__PURE__*/_jsx(\"p\",{children:latitude}),/*#__PURE__*/_jsx(\"p\",{children:\"X\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return removeBaseItem(id);},children:\"remove\"})]},id);})}),/*#__PURE__*/_jsx(\"div\",{className:\"outputBase\",children:areas.map(function(area){var id=area.id,areaname=area.areaname,longitude=area.longitude,latitude=area.latitude,weight=area.weight;return/*#__PURE__*/_jsxs(\"div\",{className:\"item\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Area\"}),/*#__PURE__*/_jsx(\"h4\",{children:areaname}),/*#__PURE__*/_jsx(\"p\",{children:longitude}),/*#__PURE__*/_jsx(\"p\",{children:latitude}),/*#__PURE__*/_jsx(\"p\",{children:weight}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return removeAreaItem(id);},children:\"remove\"})]},id);})}),/*#__PURE__*/_jsx(\"button\",{type:\"reset\",className:\"totalbtn\",onClick:function onClick(){resetAll();},children:\" RESET \"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"totalbtn\",onClick:submitData,children:\" SUBMIT \"})]})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(ResultDisplay,{result:reply})})]});};export default FullInput;","map":{"version":3,"sources":["/Users/allentrandinh/Desktop/BlacknRossi2/full-stack/react/src/base_ranking/base_fullinput.js"],"names":["React","useState","axios","BaseInput","ConflictInput","Explanation","ResultDisplay","FullInput","bases","setBases","updatebaselist","newBase","removeBaseItem","id","newBases","filter","base","areas","setAreas","updatearealist","newArea","removeAreaItem","newAreas","area","intro","reply","setReply","resetAll","submitData","e","preventDefault","console","log","post","then","respond","data","catch","err","map","basename","longitude","latitude","areaname","weight"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react';\nimport axios from 'axios';\n\nimport BaseInput from './base_input';\nimport ConflictInput from'./conflict_areas_input';\nimport Explanation from './explanation';\nimport ResultDisplay from './result_display';\n\nconst FullInput = () => {\n\n    const [bases, setBases] = useState([]);\n    const updatebaselist = (newBase) => {\n        setBases([...bases, newBase]);\n    };\n    const removeBaseItem = (id) => {\n    let newBases = bases.filter((base) => base.id !== id);\n    setBases(newBases);\n  };\n\n    const [areas, setAreas] = useState([]);\n    const updatearealist = (newArea) => {\n        setAreas([...areas,newArea]);\n    };\n    const removeAreaItem = (id) => {\n    let newAreas = areas.filter((area) => area.id !== id);\n    setAreas(newAreas);\n  };\n\n    // const data = {intro: \"The ascending order of bases with regards to total distance to all potential conflicting areas are:\", base: [[\"sprat\", 34, 12]]}\n    // const before = {intro:\"No data to display\",base:[]}\n    const [reply,setReply] = useState({intro:\"No data to display\",base:[]});\n\n    const resetAll = () => {\n        setAreas([]);\n        setBases([]);\n        setReply({intro:\"No data to display\",base:[]});\n    };\n\n    const submitData = (e) => {\n        e.preventDefault();\n        console.log(\"submit button clicked\");\n        axios\n            .post('/baseranker',{base:bases,area:areas})\n            .then((respond) => {\n                console.log(respond);\n                setReply({intro:respond.data.intro,base:respond.data.base})\n             })\n            .catch(err => {console.log(err)});\n    };\n\n\n    return(\n        <React.Fragment>\n            <Explanation/>\n            <div className='grid37'>\n            <div>\n                <BaseInput bases={bases} onChange={updatebaselist}/>\n                <ConflictInput areas={areas} onChange={updatearealist}/>\n            </div>\n            <div>\n            <div className='outputBase'>\n                {bases.map((base) => {\n                const { id, basename, longitude, latitude } = base;\n                return (\n                    <div key={id} className='item'>\n                    <h4>Base</h4>\n                    <h4>{basename}</h4>\n                    <p>{longitude}</p>\n                    <p>{latitude}</p>\n                    <p>X</p>\n                    <button onClick={() => removeBaseItem(id)}>remove</button>\n                    </div>\n                );\n                })}\n            </div>\n            <div className='outputBase'>\n                {areas.map((area) => {\n                const { id, areaname, longitude, latitude, weight } = area;\n                return (\n                    <div key={id} className='item'>\n                    <h4>Area</h4>\n                    <h4>{areaname}</h4>\n                    <p>{longitude}</p>\n                    <p>{latitude}</p>\n                    <p>{weight}</p>\n                    <button onClick={() => removeAreaItem(id)}>remove</button>\n                    </div>\n                );\n                })}\n            </div>\n            <button type='reset' className='totalbtn' onClick={()=>{resetAll()}}> RESET </button>\n            <button type='submit' className='totalbtn' onClick={submitData}> SUBMIT </button>\n            </div>\n            </div>\n\n            <div>\n                <ResultDisplay result={reply}/>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default FullInput;"]},"metadata":{},"sourceType":"module"}